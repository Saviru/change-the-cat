name: Cat Photo Changer

on:
  issues:
    types: [opened]

jobs:
  change-cat:
    if: ${{ github.event.issue.title == 'Meow!' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm install axios
        
      - name: Create necessary directories
        run: |
          mkdir -p .github/scripts
          mkdir -p images

      - name: Create script file
        run: |
          cat > .github/scripts/change-cat.js << 'EOL'
          const axios = require('axios');
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');

          // Function to get a random cat photo from The Cat API
          async function getRandomCatPhoto() {
            try {
              const response = await axios.get('https://api.thecatapi.com/v1/images/search');
              return response.data[0].url;
            } catch (error) {
              console.error('Error fetching cat photo:', error);
              process.exit(1);
            }
          }

          // Function to download the image and save it
          async function downloadImage(url, filepath) {
            try {
              const response = await axios({
                url,
                method: 'GET',
                responseType: 'stream'
              });

              return new Promise((resolve, reject) => {
                const writer = fs.createWriteStream(filepath);
                response.data.pipe(writer);
                writer.on('finish', resolve);
                writer.on('error', reject);
              });
            } catch (error) {
              console.error('Error downloading image:', error);
              process.exit(1);
            }
          }

          // Function to update the cat history
          function updateCatHistory(issueCreator) {
            const historyPath = path.join(process.cwd(), 'cat-history.json');
            let history = { lastChangedBy: 'Unknown', timestamp: new Date().toISOString() };
            
            // Try to read existing history file
            if (fs.existsSync(historyPath)) {
              try {
                history = JSON.parse(fs.readFileSync(historyPath, 'utf8'));
              } catch (error) {
                console.warn('Could not parse history file, creating new one');
              }
            }
            
            // Store the previous changer to use in the issue comment
            const lastChanger = history.lastChangedBy;
            
            // Update history with new changer
            history.lastChangedBy = issueCreator;
            history.timestamp = new Date().toISOString();
            
            // Write updated history back to file
            fs.writeFileSync(historyPath, JSON.stringify(history, null, 2));
            
            return lastChanger;
          }

          // Function to update the README.md file
          function updateReadme(issueCreator, timestamp) {
            const readmePath = path.join(process.cwd(), 'README.md');
            const readmeContent = `# Random Cat Photo

          ![Random Cat](./images/cat.jpg?v=${Date.now()})

          This cat photo was last changed by [@${issueCreator}](https://github.com/${issueCreator}) on ${timestamp}.

          ## How to get a new cat?

          Create a new issue with the title "Meow!" and our workflow will automatically change the cat photo!
          `;

            fs.writeFileSync(readmePath, readmeContent);
            console.log('Updated README.md with new cat photo info');
          }

          async function main() {
            try {
              const issueCreator = process.env.ISSUE_CREATOR;
              const currentTimestamp = new Date().toISOString();
              
              // 1. Get last changer and update history
              const lastChanger = updateCatHistory(issueCreator);
              console.log(`Last cat changer was: ${lastChanger}`);
              console.log(`New cat changer is: ${issueCreator}`);
              
              // 2. Get random cat photo
              const catPhotoUrl = await getRandomCatPhoto();
              console.log(`Got new cat photo: ${catPhotoUrl}`);
              
              // 3. Save the cat photo
              const imagePath = path.join(process.cwd(), 'images', 'cat.jpg');
              await downloadImage(catPhotoUrl, imagePath);
              console.log(`Saved cat photo to: ${imagePath}`);
              
              // 4. Update README.md with the new cat photo
              updateReadme(issueCreator, currentTimestamp);
              
              // For GitHub Actions
              execSync(`echo "LAST_CHANGER=${lastChanger}" >> $GITHUB_ENV`);
              
            } catch (error) {
              console.error('Error in main process:', error);
              process.exit(1);
            }
          }

          main();
          EOL

      - name: Create initial cat history if it doesn't exist
        run: |
          if [ ! -f cat-history.json ]; then
            echo '{"lastChangedBy": "Saviru", "timestamp": "2025-04-04T12:04:08Z"}' > cat-history.json
          fi

      - name: Change cat photo
        run: node .github/scripts/change-cat.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_CREATOR: ${{ github.event.issue.user.login }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add images/cat.jpg cat-history.json README.md
          git commit -m "Change cat photo (triggered by @${{ github.event.issue.user.login }})"
          git push
          
      - name: Close issue
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: "Meow! I've changed the cat photo for you. It was last changed by: ${{ env.LAST_CHANGER }}"